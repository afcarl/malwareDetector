
# coding: utf-8

# In[1]:


from utils.FeatureReader.FeatureReader import FeatureReader as fr
import tensorflow as tf
import pandas as pd
import numpy as np
import tensorflow.contrib.layers as layers

feature_size = 2000
class_size = 2


# In[2]:


traindata , trainlabel, testdata, testlabel = fr([0, 3, 4, 5, 8, 9, 10, 11, 1, 2, 6, 7], normalize_choice=[6, 6, 6, 6, 6, 6, 0, 5, 6, 6, 0, 1], dir_name='features').read()


# In[3]:


print(np.shape(traindata),np.shape(trainlabel))

trainlabel = trainlabel.reshape((-1,1))
trainlabel = np.hstack((trainlabel,trainlabel))

testlabel = testlabel.reshape((-1,1))
testlabel = np.hstack((testlabel,testlabel))

for tt in trainlabel:
    if tt[0] == 1:
        tt[1] = 0
    else:
        tt[1] = 1
        
for tt in testlabel:
    if tt[0] == 1:
        tt[1] = 0
    else:
        tt[1] = 1

print(np.shape(traindata),np.shape(trainlabel))


# In[4]:


feature_size = np.shape(traindata)[1]
sample_size = np.shape(traindata)[0]

print(sample_size,feature_size)
layer_size = 1024
batch_size = 100
n_epochs = 50
learning_rate = 0.001
beta = 0.001
reg = 0.1

##

X = tf.placeholder(tf.float32,[None, feature_size], name='X')
Y = tf.placeholder(tf.float32,[None, class_size], name='Y')
regularizer = tf.contrib.layers.l2_regularizer(scale=0.1)

layer1 = layers.fully_connected(inputs=X, num_outputs=layer_size, activation_fn=tf.nn.relu, weights_regularizer = layers.l2_regularizer(scale=reg))

layer2 = layers.fully_connected(inputs=layer1, num_outputs=layer_size, activation_fn=tf.nn.relu, weights_regularizer = layers.l2_regularizer(scale=reg))
fc = layers.fully_connected(layer2, feature_size, tf.nn.relu)

w = tf.Variable(tf.random_normal(shape=[feature_size, class_size], stddev=0.01), name='weights')
b = tf.Variable(tf.zeros([1, class_size]), name="bias")
logits = tf.matmul(fc, w) + b

entropy = tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=Y, name='loss')
normal_loss = tf.reduce_mean(entropy) 

reg_losses = tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)

loss = normal_loss + beta * (sum(reg_losses) + tf.nn.l2_loss(w))

optimizer = tf.train.AdamOptimizer(learning_rate).minimize(loss)


# In[5]:


with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    
    for i in range(n_epochs): # train the model n_epochs times
        total_loss = 0
        n_batches = int(sample_size/batch_size)
        for _ in range(n_batches):
            #print('batch %i'%(_))
            begin = batch_size*_
            end=begin+batch_size
            #print('begin,end= ',begin,end)
            X_batch, Y_batch = traindata[begin:end], trainlabel[begin:end]
            _, loss_batch = sess.run([optimizer, loss], feed_dict={X: X_batch, Y:Y_batch}) 
            total_loss += loss_batch
        print('Average loss epoch {0}: {1}'.format(i, total_loss/n_batches))
        
    preds = tf.nn.softmax(logits)
    correct_preds = tf.equal(tf.argmax(preds, 1), tf.argmax(Y, 1))
    accuracy = tf.reduce_sum(tf.cast(correct_preds, tf.float32)) # need numpy.count_nonzero(boolarr) :(

    total_correct_preds = 0

    for _ in range(n_batches):
        begin = batch_size*_
        end=begin+batch_size
        X_batch, Y_batch = traindata[begin:end], trainlabel[begin:end]
        accuracy_batch = sess.run(accuracy, feed_dict={X: X_batch, Y:Y_batch}) 
        total_correct_preds += accuracy_batch
        
    if sample_size > batch_size*n_batches:
        begin = batch_size*n_batches
        end = sample_size 
        X_batch, Y_batch = traindata[begin:end], trainlabel[begin:end]
        accuracy_batch = sess.run(accuracy, feed_dict={X: X_batch, Y:Y_batch}) 
        total_correct_preds += accuracy_batch
        
    #total_correct_preds = sess.run(accuracy, feed_dict={X: value[:sample_size], Y:label[:sample_size]}) 

    print('traindata Accuracy {0}'.format(total_correct_preds/sample_size))
    
    
    ###
    total_correct_preds = 0
    
    for _ in range(n_batches):
        begin = batch_size*_
        end=begin+batch_size
        X_batch, Y_batch = testdata[begin:end], testlabel[begin:end]
        accuracy_batch = sess.run(accuracy, feed_dict={X: X_batch, Y:Y_batch}) 
        total_correct_preds += accuracy_batch
        
    if sample_size > batch_size*n_batches:
        begin = batch_size*n_batches
        end = sample_size 
        X_batch, Y_batch = testdata[begin:end], testlabel[begin:end]
        accuracy_batch = sess.run(accuracy, feed_dict={X: X_batch, Y:Y_batch}) 
        total_correct_preds += accuracy_batch
        
    #total_correct_preds = sess.run(accuracy, feed_dict={X: value[:sample_size], Y:label[:sample_size]}) 

    print('testdata Accuracy {0}'.format(total_correct_preds/sample_size))

    saver = tf.train.Saver()

    saver.save(sess, "./model/model.ckpt")

